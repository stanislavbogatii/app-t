// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  email         String   @unique
  hash          String

  profile       Profile?
  company       Company?

  @@map("users")
}

enum GenderEnum {
  female
  male
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  commercialName  String
  phone           String?
  fiscalCode      String?

  userId    Int      @unique

  user      User     @relation(fields: [userId], references: [id])

  @@map("companies")
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?
  phone     String?
  gender    GenderEnum?

  userId    Int       @unique

  user      User      @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Lang {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  langId           String           @unique
  productContents  ProductContent[]
  categoryContents CategoryContent[]

  @@map("lang")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean
  code     String  @unique

  parentId Int?

  parent          Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]        @relation("CategoryHierarchy")
  categoryContent CategoryContent[]
  categoryProducts         CategoryProduct[]

  @@map("categories")
}

model CategoryContent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String?
  description String?
  slug        String? @unique

  categoryId Int
  langId     String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  lang     Lang     @relation(fields: [langId], references: [langId])

  @@unique([langId, categoryId])
  @@map("category_content")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean
  price    Float
  oldPrice Float?

  categoryProducts  CategoryProduct[]
  productContent    ProductContent[]

  @@map("products")
}

model CategoryProduct {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId Int
  productId  Int

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@map("category_product")
}

model ProductContent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String?
  description String?
  slug        String?

  productId Int
  langId    String

  product Product @relation(fields: [productId], references: [id])
  lang    Lang    @relation(fields: [langId], references: [langId])

  @@unique([langId, productId])
  @@map("product_content")
}
